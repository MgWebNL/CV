<?php
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link      http://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   http://www.opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\Network\Exception\NotFoundException;
use Cake\View\Exception\MissingTemplateException;
use Cake\I18n\Time;
use Cake\Datasource\ConnectionManager;
use Cake\Mailer\Email;


/**
 * Static content controller
 *
 * This controller will render views from Template/Pages/
 *
 * @link http://book.cakephp.org/3.0/en/controllers/pages-controller.html
 */
class AccountController extends AppController
{
    public $m_aHelperText = [];

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent("DatabaseHelper");

        $this->m_aHelperText[__FUNCTION__] = [
            'nl' => 'Hier staan al uw accountgegevens weergegeven. Ook kunt u hier uw wachtwoord wijzigen, een suggestie sturen en uzelf aan- en afmelden voor onze nieuwsbrieven.',
        ];
    }

    /**
     * Displays a view
     *
     * @return void|\Cake\Network\Response
     * @throws \Cake\Network\Exception\NotFoundException When the view file could not
     *   be found or \Cake\View\Exception\MissingTemplateException in debug mode.
     */
    public function index(){

        // LOAD ADDRESS DATA
        $this->loadModel('Address');
        $aAddress = $this->Address->get($this->m_iPartner, ['contain' => ['Country', 'HdAddress.Employee', 'PaymentCondition', 'PaymentMethod']]);

        // LOAD CONTACTS
        $this->loadModel('Contactperson');
        $aContactperson = $this->Contactperson->find('all')
            ->where(["BKHCO_BKHADNRINT" => $this->m_iPartner, "BKHCONAAM !=" => '<in use>'])
            ->all();

        // LOAD DEL. ADDRESSES
        $this->loadModel('AddressDelivery');
        $aDeliveryAddress = $this->AddressDelivery->find('all')
            ->contain(["Country"])
            ->where(["BKHAAF_BKHADNRINT" => $this->m_iPartner])
            ->all();

        // GET PAY RATE
        $this->loadModel('PaymentVF');
        $aPayRate = $this->PaymentVF->getAvgPaymentRate($this->m_iPartner);

        // GET OPEN AMOUNT
        $this->loadModel('Invoice');
        $aOpenAmount = $this->Invoice->getOpenAmountCustomer($this->m_iPartner);

        $this->set("aAddress", $aAddress);
        $this->set("aContactperson", $aContactperson);
        $this->set("aDeliveryAddress", $aDeliveryAddress);
        $this->set("aPayRate", $aPayRate);
        $this->set("aOpenAmount", $aOpenAmount);


    }



    public function changePassword(){

        if($this->request->is('post')){

            $aPost = $this->request->data();
            $this->loadModel('CustomerLogin');

            // CHECK NEW PASSWORD RETYPE !!
            if($aPost["passwordNew"] == $aPost["passwordNewRetype"]){
                if($this->CustomerLogin->checkNewPassword($aPost["passwordNew"])){
                    $this->CustomerLogin->makeNewPassword($this->request->session()->read('customerlogin')["customer_user_id"], $aPost["passwordNew"]);
                    $this->request->session()->write('customerlogin.customer_force_password', 0);
                    $this->Flash->success(__('Password changed'));
                    return $this->redirect('/Account/');
                }else{
                    $this->Flash->error(
                        __('The password you provided is not secure. It needs to contain 1 uppercase, 1 lowercase, 1 number and a minimum length of 6 characters.'),
                        ['key' => 'passwordError']
                    );
                    return $this->redirect('/Account/');
                }
            }else{
                $this->Flash->error(
                    __('The passwords you provided are not identical'),
                    ['key' => 'passwordError']
                );
                return $this->redirect('/Account/');
            }
        }else{
            $this->Flash->error(
                __('You do not have permissions to visit this page'),
                ['key' => 'passwordError']
            );
            return $this->redirect('/Account/');
        }

    }

    public function sendSuggestion(){
        if($this->request->is('post')){
            $aPost = $this->request->data();
            $this->loadModel("CustomerLogin");
            $aUser = $this->CustomerLogin->getUserById($this->request->session()->read('customerlogin')["customer_user_id"]);

            $p_sEmailaddress = HD_EMAIL;

            $to = ($p_sEmailaddress == '') ? $aUser->emailaddress : $p_sEmailaddress;

            $email = new Email();
            $email
                ->emailFormat('html')
                ->from([HD_EMAIL_NOREPLY => HD_COMPANYNAME])
                ->template('nl/suggestionRequest')
                ->to($to)
                ->subject('Portal - Nieuwe suggestie/vraag')
                ->viewVars([
                    'customerCode' => $aUser->Address->BKHADCODE,
                    'customerName' => $aUser->Address->BKHADNAAM,
                    'request' => $aPost["inputSuggestion"]
                ])
                ->send();

            $this->Flash->success(__('Your suggestion has been submitted.'));
            $this->redirect('/Account/');

        }else{
            $this->Flash->error(__('You\'ve been redirected here because have no permissions for the page you tried to visit.'));
            $this->redirect('/');
        }
    }

    public function ajax($p_sFunctionName){
        if($this->request->is('post')) {
            switch ($p_sFunctionName) {
                case "saveNewsletter":
                    $this->saveNewsletter($this->request->data);
                    break;
            }
            echo 1;
        }
        die();
    }

    /** AJAX FUNCTIONS ! **/
    private function saveNewsletter($p_aData){
        $field = $p_aData["field"];
        $this->loadModel('HdAddress');
        $entry = $this->HdAddress->find('all')->where(["FRbkhADRES_NRINT" => $p_aData["nrint"]])->first();
        $a = [
            "id" => $entry->id,
            $field => $p_aData["value"]
        ];
        $this->DatabaseHelper->save("HdAddress", $a);
    }



    public function beforeRender(Event $event)
    {
        parent::beforeRender($event);
        $this->set("aPageHelper", $this->m_aHelperText);
    }
}
